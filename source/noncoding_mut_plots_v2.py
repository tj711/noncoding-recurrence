#!python

import cPickle
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from operator import itemgetter
import os.path

## Titles for plots
titles = {'mse': 'Mean Squared Error (MSE)',
					'r2': 'R-square Score (R2)',
					'muae': 'Mean Absolute Error',
					'mdae': 'Median Absolute Error',
					'expvar': 'Explained Variance Score',
					'imp': 'Feature Importance'}

## Marker for plots
markers = {'rf': 'go--', 
					 'sgd': 'ro--', 
					 'nb': 'bd--', 
					 'ada': 'ms--', 
					 'gradient': 'yv--',
					 'poisson': 'c*--',
					 'ann':'kp--',
					 'sae':'c+--'}

## Labels for plots
labels = {'rf': 'Random Forest', 
	        'ada': 'AdaBoosting',
	        'sgd': 'Stochastic Gradient Descent', 
	        #'svr' : 'SVR',
	        'gradient': 'Gradient Boosting',
	        'poisson': 'Poisson Regression',
	        'nb': 'Negative Binomial',
	        'ann': 'Neural Network',
	        'sae': 'Stacked AutoEncoder'}

features = ['tfbs_cnt',
						'tfbs_max_sc',
						'tfbs_avg_sc',
						'atf3_cnt',
						'atf3_max_sc',
						'atf3_avg_sc',
						'cebpb_cnt',
						'cebpb_max_sc',
						'cebpb_avg_sc',
						'cebpd_cnt',
						'cebpd_max_sc',
						'cebpd_avg_sc',
						'creb1_cnt',
						'creb1_max_sc',
						'creb1_avg_sc',
						'egr1_cnt',
						'egr1_max_sc',
						'egr1_avg_sc',
						'ets1_cnt',
						'ets1_max_sc',
						'ets1_avg_sc',
						'maff_cnt',
						'maff_max_sc',
						'maff_avg_sc',
						'dhs_src_cnt',
						'dhs_max_sc',
						'gerp_sc',
						'tss_dist',
						'gc_per']


def readFile(fname,mode):
  try:
    infile = open(fname, mode)
  except IndexError:
    print "file read error...",fname
    sys.exit()
  return infile
#//end readFile


def buildErrMap(regressor, test_fl, train_fl, test_map, shuf_map, train_map):
	testhdl = readFile(test_fl,"r")
	trainhdl = readFile(train_fl,"r")

	for line in testhdl:
		rec_test = line.strip.().split('\t')




#----------------------------------------------------------
# Main function
#----------------------------------------------------------
def main():
	sample_rates = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]
	sample_iters = 5

	regressors = ['poisson', 'nb', 'rf', 'ada', 'gradient', 'ann', 'sae']
	
	in_path = "/home/tanjinxu/Project/noncoding/plots/data/"
	name_prefix = "nc.res.freq.filtered."

	## Read all data files for each regressor and build the map
	## <rate> -> {<regressor> -> [ list of errors over iterations]}
	test_mse_map = {}
	shuf_mse_map = {}
	train_mse_map = {}
	test_file = ""
	train_file = ""
	imp_file = ""

	for rate in sample_rates:
		for regr in regressors:
			for i in range(sample_iters):
				fpref = in_path + name_prefix + str(rate) + "." + str(i) + "." + regr

				if regr == 'poisson' or regr == 'nb':
					test_file = fpref + ".err.tsv"
					imp_file = fpre + ".imp.tsv"
					train_file = test_file
				else:
					test_file = fpref + ".test.err.tsv"
					train_file = fpref + ".train.err.tsv"
					imp_file = fpref + ".train.imp.tsv"

				if os.path.isfile(test_file):
					test_mse_map,shuf_mse_map,train_mse_map = 
							buildErrMap(regr,
													test_file,
													train_file,
													test_mse_map,
													shuf_mse_map,
													train_mse_map)
				else:
					# file does not exist, that's okay
					continue
			#//end for
		#//end for
	#//end for










	# Names format of the files generated by model learning
	tsv_suffix = "0.6"
	png_suffix = "0.6.1"

	# nc.mse.out.313.<regressor>.<param>
	#nm_prefix = 'nc.mse.out.316.1M.0.1M'
	nm_prefix = 'nc.mse.out.sampled.'+png_suffix
	
	## Output directory
	in_path = "/home/tanjinxu/Project/noncoding/sklearn_out/dumps/p60/"
	out_path = "/home/tanjinxu/Project/noncoding/sklearn_out/dumps/p60/figures/"
	mse_path = "/home/tanjinxu/Project/noncoding/sklearn_out/figures/"

	#metrics = ['mse','r2','ps','sp', 'imp', 'muae', 'mdae', 'expvar']
	metrics = ['mse','muae','mdae','r2','expvar','imp']

	params = {'rf': [30,40,50,100,150,200,300],           #number of trees
						'ada': [50,100,150,200,250,300,350],        #number of decision stumps
						'knn': [5,7,9,10,15,20,30],                 #number of neighbours
						'sgd': [5, 10, 20, 50, 100, 150, 200],      #number of iterations
						'svr': [0.001,0.005,0.01,0.05,0.1,0.5,1.0], #penalty of the error
						'gradient': [50,100,120,150,200,250,300]    #number of boosting steps
					}

	#regressors = ['poisson','nb']
	regressors = ['rf','ada','gradient','sgd','poisson','nb','ann', 'sae']

	mseMap = {}   # Mean Squared Error
	r2Map  = {}   # R-Squared score
	psMap  = {}   # Pearson-coefficient
	spMap  = {}   # Spearman-coefficient
	muaeMap = {}  # Mean Absolute Error
	mdaeMap = {}  # Median Absolute Error
	expsMap = {}  # Explained Variance Score
	impMap  = {}  # feature-importance

	predMaps = {'mse':mseMap,
							'r2':r2Map,
							'muae':muaeMap,
							'mdae':mdaeMap,
							'expvar':expsMap,
							'imp':impMap}

	for regressor in regressors:
		fname = in_path + nm_prefix + "." + regressor
		if regressor == 'ann' or regressor == 'sae':
			annRes = cPickle.load(open(fname,'rb'))
			expvars = []
			if annRes.has_key('exps'):
				expvars = annRes['exps']
			elif annRes.has_key('expvar'):
				expvars = annRes['expvar']

			annparms = annRes['neurons']
			train_metrics = {'mse': annRes['val_loss']}
			test_metrics = {'mse': annRes['mse'],
											'r2': annRes['r2'],
											'muae':annRes['muae'],
											'mdae':annRes['mdae'],
											'expvar': expvars}
			metricsMap = {'train':train_metrics, 'test':test_metrics}
		elif regressor == 'poisson' or regressor == 'nb':
			csv_error = in_path+"nc.res.raw."+regressor+".err."+tsv_suffix+".tsv"
			csv_imp = in_path+"nc.res.raw."+regressor+".imp."+tsv_suffix+".tsv"
			df_error = pd.read_csv(csv_error,
														 header = 0,
														 sep = '\t',
														 index_col = 0)
			df_imp = pd.read_csv(csv_imp,
														header = 0,
														index_col = 0,
														sep = '\t'
													)
			imp_array = df_imp.as_matrix()
			error_array = df_error.as_matrix()
			#print imp_array.shape,imp_array
			#print error_array
			
			train_metrics = {'muae':[error_array[0,0]]*7,
											 'mse': [error_array[1,0]]*7,
											 'meae': [error_array[2,0]]*7,
											 'expvar': [error_array[3,0]]*7,
									 		 'r2': [error_array[4,0]]*7,
									 		 'imp': imp_array[:,0]}
			test_metrics = {'muae': error_array[10,0],
											'mse': error_array[11,0],
											'meae': error_array[12,0],
											'expvar': error_array[13,0],
											'r2': error_array[14,0]}

			metricsMap = {'train':train_metrics, 'test':test_metrics}
		else:
			metricsMap = cPickle.load(open(fname,'rb'))
		#//end if

		predMaps = appendToMaps(predMaps,regressor,metricsMap,metrics)
	#//end for

	#print predMaps['imp']
	plotMetrics(predMaps,regressors,params,metrics,out_path,mse_path,png_suffix)
#//end main function

if __name__ == "__main__":
	main()
